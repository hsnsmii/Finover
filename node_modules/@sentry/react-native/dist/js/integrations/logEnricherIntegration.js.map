{"version":3,"file":"logEnricherIntegration.js","sourceRoot":"","sources":["../../../src/js/integrations/logEnricherIntegration.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport type { Integration, Log } from '@sentry/core';\nimport { debug } from '@sentry/core';\nimport type { ReactNativeClient } from '../client';\nimport { NATIVE } from '../wrapper';\n\nconst INTEGRATION_NAME = 'LogEnricher';\n\nexport const logEnricherIntegration = (): Integration => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client: ReactNativeClient) {\n      client.on('afterInit', () => {\n        cacheLogContext().then(\n          () => {\n            client.on('beforeCaptureLog', (log: Log) => {\n              processLog(log, client);\n            });\n          },\n          reason => {\n            debug.log(reason);\n          },\n        );\n      });\n    },\n  };\n};\n\nlet NativeCache: Record<string, unknown> | undefined = undefined;\n\n/**\n * Sets a log attribute if the value exists and the attribute key is not already present.\n *\n * @param logAttributes - The log attributes object to modify.\n * @param key - The attribute key to set.\n * @param value - The value to set (only sets if truthy and key not present).\n * @param setEvenIfPresent - Whether to set the attribute if it is present. Defaults to true.\n */\nfunction setLogAttribute(\n  logAttributes: Record<string, unknown>,\n  key: string,\n  value: unknown,\n  setEvenIfPresent = true,\n): void {\n  if (value && (!logAttributes[key] || setEvenIfPresent)) {\n    logAttributes[key] = value;\n  }\n}\n\nasync function cacheLogContext(): Promise<void> {\n  try {\n    const response = await NATIVE.fetchNativeLogAttributes();\n\n    NativeCache = {\n      ...(response?.contexts?.device && {\n        brand: response.contexts.device?.brand,\n        model: response.contexts.device?.model,\n        family: response.contexts.device?.family,\n      }),\n      ...(response?.contexts?.os && {\n        os: response.contexts.os.name,\n        version: response.contexts.os.version,\n      }),\n      ...(response?.contexts?.release && {\n        release: response.contexts.release,\n      }),\n    };\n  } catch (e) {\n    return Promise.reject(`[LOGS]: Failed to prepare attributes from Native Layer: ${e}`);\n  }\n  return Promise.resolve();\n}\n\nfunction processLog(log: Log, client: ReactNativeClient): void {\n  if (NativeCache === undefined) {\n    return;\n  }\n\n  // Save log.attributes to a new variable\n  const logAttributes = log.attributes ?? {};\n\n  // Use setLogAttribute with the variable instead of direct assignment\n  setLogAttribute(logAttributes, 'device.brand', NativeCache.brand);\n  setLogAttribute(logAttributes, 'device.model', NativeCache.model);\n  setLogAttribute(logAttributes, 'device.family', NativeCache.family);\n  setLogAttribute(logAttributes, 'os.name', NativeCache.os);\n  setLogAttribute(logAttributes, 'os.version', NativeCache.version);\n  setLogAttribute(logAttributes, 'sentry.release', NativeCache.release);\n\n  const replay = client.getIntegrationByName<Integration & { getReplayId: () => string | null }>('MobileReplay');\n  setLogAttribute(logAttributes, 'sentry.replay_id', replay?.getReplayId());\n\n  // Set log.attributes to the variable\n  log.attributes = logAttributes;\n}\n"]}