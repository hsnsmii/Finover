{"version":3,"file":"replayInterface.js","sourceRoot":"","sources":["../../../src/js/replay/replayInterface.ts"],"names":[],"mappings":"","sourcesContent":["import type { Integration, ReplayRecordingMode } from '@sentry/core';\n\n// Based on Replay Class https://github.com/getsentry/sentry-javascript/blob/e00cb04f1bbf494067cd8475d392266ba296987a/packages/replay-internal/src/integration.ts#L50\n\n/**\n * Common interface for React Native Replay integrations.\n *\n * Both browser and mobile replay integrations should implement this interface\n * to allow user manually control the replay.\n */\nexport interface Replay extends Integration {\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will log a message if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n  start(): void;\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, until an error occurs.\n   */\n  startBuffering(): void;\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  stop(): Promise<void>;\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * If replay is not enabled, a new session replay is started.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n  flush(options?: { continueRecording?: boolean }): Promise<void>;\n\n  /**\n   * Get the current session ID.\n   */\n  getReplayId(): string | undefined;\n\n  /**\n   * Get the current recording mode. This can be either `session` or `buffer`.\n   *\n   * `session`: Recording the whole session, sending it continuously\n   * `buffer`: Always keeping the last 60s of recording, requires:\n   *   - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n   *   - or calling `flush()` to send the replay\n   */\n  getRecordingMode(): ReplayRecordingMode | undefined;\n}\n"]}